{"ast":null,"code":"import React,{useState}from'react';import GameBoard from'./components/GameBoard';import'./App.css';import{jsx as _jsx}from\"react/jsx-runtime\";const App=()=>{const[gameState,setGameState]=useState({hands:{},// player id mapped to their hand\ndrawPile:[],discardPile:[],currentPlayerIndex:0,playDirection:1,// 1 for forward, -1 for reverse\ncurrentColor:null,// important for wild cards\nunoCalled:false});// Define handleCardPlayed\nconst handleCardPlayed=card=>{console.log('Card played:',card);// Here you would include logic to update the game state based on the played card.\n// This might involve moving the card to the discard pile, applying any card effects,\n// and advancing the turn to the next player.\n};// Define handleDrawCard if not already defined\nconst handleDrawCard=()=>{console.log('Draw card action triggered');// Implementation for drawing a card from the draw pile\n};return/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsx(GameBoard,{gameState:gameState,onCardPlayed:handleCardPlayed,onDrawCard:handleDrawCard})});};export default App;","map":{"version":3,"names":["React","useState","GameBoard","jsx","_jsx","App","gameState","setGameState","hands","drawPile","discardPile","currentPlayerIndex","playDirection","currentColor","unoCalled","handleCardPlayed","card","console","log","handleDrawCard","className","children","onCardPlayed","onDrawCard"],"sources":["/Users/ebenezereshetu/uno-online/uno-online/uno-online/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport GameBoard from './components/GameBoard';\nimport './App.css';\n\nconst App = () => {\n  const [gameState, setGameState] = useState({\n    hands: {}, // player id mapped to their hand\n    drawPile: [],\n    discardPile: [],\n    currentPlayerIndex: 0,\n    playDirection: 1, // 1 for forward, -1 for reverse\n    currentColor: null, // important for wild cards\n    unoCalled: false,\n  });\n\n  // Define handleCardPlayed\n  const handleCardPlayed = (card) => {\n    console.log('Card played:', card);\n    // Here you would include logic to update the game state based on the played card.\n    // This might involve moving the card to the discard pile, applying any card effects,\n    // and advancing the turn to the next player.\n  };\n\n  // Define handleDrawCard if not already defined\n  const handleDrawCard = () => {\n    console.log('Draw card action triggered');\n    // Implementation for drawing a card from the draw pile\n  };\n\n  return (\n    <div className=\"app\">\n      <GameBoard gameState={gameState} onCardPlayed={handleCardPlayed} onDrawCard={handleDrawCard} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnB,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGN,QAAQ,CAAC,CACzCO,KAAK,CAAE,CAAC,CAAC,CAAE;AACXC,QAAQ,CAAE,EAAE,CACZC,WAAW,CAAE,EAAE,CACfC,kBAAkB,CAAE,CAAC,CACrBC,aAAa,CAAE,CAAC,CAAE;AAClBC,YAAY,CAAE,IAAI,CAAE;AACpBC,SAAS,CAAE,KACb,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,gBAAgB,CAAIC,IAAI,EAAK,CACjCC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEF,IAAI,CAAC,CACjC;AACA;AACA;AACF,CAAC,CAED;AACA,KAAM,CAAAG,cAAc,CAAGA,CAAA,GAAM,CAC3BF,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzC;AACF,CAAC,CAED,mBACEd,IAAA,QAAKgB,SAAS,CAAC,KAAK,CAAAC,QAAA,cAClBjB,IAAA,CAACF,SAAS,EAACI,SAAS,CAAEA,SAAU,CAACgB,YAAY,CAAEP,gBAAiB,CAACQ,UAAU,CAAEJ,cAAe,CAAE,CAAC,CAC5F,CAAC,CAEV,CAAC,CAED,cAAe,CAAAd,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}