{"ast":null,"code":"import React,{useState,useEffect}from'react';import PlayerHand from'./PlayerHand';import DiscardPile from'./DiscardPile';import DrawPile from'./DrawPile';import ActionPanel from'./ActionPanel';import OpponentHand from'./OpponentHand';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const generateInitialDrawPile=()=>{const colors=['red','yellow','green','blue'];const values=Array.from({length:9},(_,i)=>i+1);let deck=[];colors.forEach(color=>{values.forEach(value=>{deck.push({id:\"\".concat(color,\"-\").concat(value),color,value:value.toString()});});});// Shuffle deck\nfor(let i=deck.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[deck[i],deck[j]]=[deck[j],deck[i]];}return deck;};const dealInitialHands=(drawPile,playerCount)=>{let hands=Array.from({length:playerCount},()=>[]);const handSize=7;for(let i=0;i<handSize;i++){hands.forEach(hand=>hand.push(drawPile.pop()));}return hands;};const GameBoard=()=>{var _gameState$hands$getN;const initialPlayerCount=2;const reshuffleDiscardIntoDrawPile=()=>{let newDiscardPile=[...gameState.discardPile];const topCard=newDiscardPile.pop();// Keep the top card out of the shuffle\nconst reshuffled=newDiscardPile.sort(()=>0.5-Math.random());// Simple shuffle\nsetGameState(prevState=>({...prevState,drawPile:reshuffled,discardPile:[topCard]// Reset discard pile with only the top card\n}));};// Initial gameState definition with hands correctly initialized as an array of arrays\nconst[gameState,setGameState]=useState({drawPile:[],hands:[],// Make sure this is correctly initialized\ndiscardPile:[],currentPlayerIndex:0,playDirection:1,playerCount:initialPlayerCount,currentColor:null});useEffect(()=>{const initialDrawPile=generateInitialDrawPile();const initialHands=dealInitialHands(initialDrawPile,gameState.playerCount);// Start the game by moving the top card from the draw pile to the discard pile\nconst initialDiscardPile=initialDrawPile.splice(0,1);setGameState(prevState=>({...prevState,drawPile:initialDrawPile.slice(initialHands.flat().length),// Adjust draw pile after dealing cards\nhands:initialHands,discardPile:initialDiscardPile// Initialize discard pile with one card\n}));},[]);const getNextPlayerIndex=()=>{return(gameState.currentPlayerIndex+gameState.playDirection+gameState.playerCount)%gameState.playerCount;};const advanceTurn=()=>{setGameState(prevState=>({...prevState,currentPlayerIndex:getNextPlayerIndex()}));};const reversePlayDirection=()=>{setGameState(prevState=>({...prevState,playDirection:prevState.playDirection*-1}));};const drawCards=(playerIndex,numberOfCards)=>{// Adjusted to include reshuffling if necessary\nlet newDrawPile=[...gameState.drawPile];if(newDrawPile.length===0)reshuffleDiscardIntoDrawPile();let newHands={...gameState.hands};let cardsToDraw=numberOfCards;while(cardsToDraw>0&&newDrawPile.length>0){const card=newDrawPile.shift();// Removes the first card from the draw pile\nnewHands[playerIndex].push(card);// Adds the card to the player's hand\ncardsToDraw--;}// If the draw pile is empty and there are still cards to draw, you might reshuffle the discard pile into the draw pile here\nsetGameState(prevState=>({...prevState,drawPile:newDrawPile,hands:newHands}));};const callUno=playerIndex=>{// Check if the player has exactly one card left and if Uno was called correctly.\nif(gameState.hands[playerIndex].length===1){console.log(\"Uno called correctly by player\",playerIndex);}else{console.log(\"Incorrect Uno call by player\",playerIndex);// Potentially draw penalty cards if called incorrectly\n}};const handleDrawCard=()=>{let newDrawPile=[...gameState.drawPile];let newHands=[...gameState.hands];// Clone the hands structure\nif(newDrawPile.length===0){reshuffleDiscardIntoDrawPile();newDrawPile=[...gameState.drawPile];// Update after reshuffle\n}const drawnCard=newDrawPile.shift();// Assume there's at least one card to draw\nnewHands[gameState.currentPlayerIndex].push(drawnCard);// Update the correct player's hand\nsetGameState(prevState=>({...prevState,drawPile:newDrawPile,hands:newHands}));};const applyCardEffect=card=>{switch(card.value){case'Skip':advanceTurn();break;case'Reverse':reversePlayDirection();break;case'Draw Two':const nextPlayer=getNextPlayerIndex();drawCards(nextPlayer,2);advanceTurn();break;case'Wild':// Prompt player to choose a color. This can be done using a modal or a set of buttons.\n// Update gameState.currentColor with the chosen color\nbreak;case'Wild Draw Four':// Similar to Wild, prompt for color choice, then make the next player draw four cards.\n// Validate the play according to Uno rules (player must not have a card matching the discard pile color)\nconst nextPlayerIndex=getNextPlayerIndex();drawCards(nextPlayerIndex,4);advanceTurn();break;// Other cases as needed\n}};const handleCardClick=card=>{// Example validation: Check if the card can be played\nconst topDiscard=gameState.discardPile[gameState.discardPile.length-1];if(card.color===topDiscard.color||card.value===topDiscard.value||card.color==='wild'){// Valid move: Play the card\nconst newHands=[...gameState.hands];newHands[gameState.currentPlayerIndex]=newHands[gameState.currentPlayerIndex].filter(c=>c.id!==card.id);const newDiscardPile=[...gameState.discardPile,card];// Add card to the discard pile\nsetGameState(prevState=>({...prevState,hands:newHands,discardPile:newDiscardPile}));applyCardEffect(card);// Apply any special effects of the card\nconsole.log(\"Playing card: \".concat(card.value));}else{// Invalid move: Provide feedback or ignore\nconsole.log(\"Cannot play \".concat(card.value,\". It does not match the discard pile.\"));}};return/*#__PURE__*/_jsxs(\"div\",{className:\"game-board\",children:[/*#__PURE__*/_jsx(OpponentHand,{cardCount:((_gameState$hands$getN=gameState.hands[getNextPlayerIndex()])===null||_gameState$hands$getN===void 0?void 0:_gameState$hands$getN.length)||0}),/*#__PURE__*/_jsx(PlayerHand,{hand:gameState.hands[gameState.currentPlayerIndex],onCardClick:handleCardClick}),/*#__PURE__*/_jsx(DrawPile,{cardsLeft:gameState.drawPile.length,onDrawCard:handleDrawCard}),/*#__PURE__*/_jsx(DiscardPile,{topCard:gameState.discardPile[gameState.discardPile.length-1]}),/*#__PURE__*/_jsx(ActionPanel,{onDrawCard:()=>drawCards(gameState.currentPlayerIndex,1),onCallUno:callUno})]});};export default GameBoard;","map":{"version":3,"names":["React","useState","useEffect","PlayerHand","DiscardPile","DrawPile","ActionPanel","OpponentHand","jsx","_jsx","jsxs","_jsxs","generateInitialDrawPile","colors","values","Array","from","length","_","i","deck","forEach","color","value","push","id","concat","toString","j","Math","floor","random","dealInitialHands","drawPile","playerCount","hands","handSize","hand","pop","GameBoard","_gameState$hands$getN","initialPlayerCount","reshuffleDiscardIntoDrawPile","newDiscardPile","gameState","discardPile","topCard","reshuffled","sort","setGameState","prevState","currentPlayerIndex","playDirection","currentColor","initialDrawPile","initialHands","initialDiscardPile","splice","slice","flat","getNextPlayerIndex","advanceTurn","reversePlayDirection","drawCards","playerIndex","numberOfCards","newDrawPile","newHands","cardsToDraw","card","shift","callUno","console","log","handleDrawCard","drawnCard","applyCardEffect","nextPlayer","nextPlayerIndex","handleCardClick","topDiscard","filter","c","className","children","cardCount","onCardClick","cardsLeft","onDrawCard","onCallUno"],"sources":["/Users/ebenezereshetu/uno-online/uno-online/uno-online/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\nimport DiscardPile from './DiscardPile';\nimport DrawPile from './DrawPile';\nimport ActionPanel from './ActionPanel';\nimport OpponentHand from './OpponentHand';\n\nconst generateInitialDrawPile = () => {\n  const colors = ['red', 'yellow', 'green', 'blue'];\n  const values = Array.from({ length: 9 }, (_, i) => i + 1);\n  let deck = [];\n\n  colors.forEach(color => {\n    values.forEach(value => {\n      deck.push({ id: `${color}-${value}`, color, value: value.toString() });\n    });\n  });\n\n\n  // Shuffle deck\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n\n  return deck;\n};\n\nconst dealInitialHands = (drawPile, playerCount) => {\n  let hands = Array.from({ length: playerCount }, () => []);\n  const handSize = 7;\n\n  for (let i = 0; i < handSize; i++) {\n    hands.forEach(hand => hand.push(drawPile.pop()));\n  }\n\n  return hands;\n};\n\nconst GameBoard = () => {\n  const initialPlayerCount = 2;\n\n  const reshuffleDiscardIntoDrawPile = () => {\n    let newDiscardPile = [...gameState.discardPile];\n    const topCard = newDiscardPile.pop(); // Keep the top card out of the shuffle\n    const reshuffled = newDiscardPile.sort(() => 0.5 - Math.random()); // Simple shuffle\n    setGameState(prevState => ({\n      ...prevState,\n      drawPile: reshuffled,\n      discardPile: [topCard] // Reset discard pile with only the top card\n    }));\n  };\n\n\n\n// Initial gameState definition with hands correctly initialized as an array of arrays\nconst [gameState, setGameState] = useState({\n  drawPile: [],\n  hands: [], // Make sure this is correctly initialized\n  discardPile: [],\n  currentPlayerIndex: 0,\n  playDirection: 1,\n  playerCount: initialPlayerCount,\n  currentColor: null,\n});\n\n\nuseEffect(() => {\n  const initialDrawPile = generateInitialDrawPile();\n  const initialHands = dealInitialHands(initialDrawPile, gameState.playerCount);\n\n  // Start the game by moving the top card from the draw pile to the discard pile\n  const initialDiscardPile = initialDrawPile.splice(0, 1);\n\n  setGameState(prevState => ({\n    ...prevState,\n    drawPile: initialDrawPile.slice(initialHands.flat().length), // Adjust draw pile after dealing cards\n    hands: initialHands,\n    discardPile: initialDiscardPile, // Initialize discard pile with one card\n  }));\n}, []);\n\n\n\n  const getNextPlayerIndex = () => {\n    return (gameState.currentPlayerIndex + gameState.playDirection + gameState.playerCount) % gameState.playerCount;\n  };\n\n  const advanceTurn = () => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentPlayerIndex: getNextPlayerIndex(),\n    }));\n  };\n\n  const reversePlayDirection = () => {\n    setGameState(prevState => ({\n      ...prevState,\n      playDirection: prevState.playDirection * -1,\n    }));\n  };\n\n  const drawCards = (playerIndex, numberOfCards) => {\n    // Adjusted to include reshuffling if necessary\n    let newDrawPile = [...gameState.drawPile];\n    if(newDrawPile.length === 0) reshuffleDiscardIntoDrawPile();\n    let newHands = { ...gameState.hands };\n    let cardsToDraw = numberOfCards;\n  \n    while (cardsToDraw > 0 && newDrawPile.length > 0) {\n      const card = newDrawPile.shift(); // Removes the first card from the draw pile\n      newHands[playerIndex].push(card); // Adds the card to the player's hand\n      cardsToDraw--;\n    }\n  \n    // If the draw pile is empty and there are still cards to draw, you might reshuffle the discard pile into the draw pile here\n  \n    setGameState(prevState => ({\n      ...prevState,\n      drawPile: newDrawPile,\n      hands: newHands,\n    }));\n  };\n\n  const callUno = (playerIndex) => {\n    // Check if the player has exactly one card left and if Uno was called correctly.\n    if (gameState.hands[playerIndex].length === 1) {\n      console.log(\"Uno called correctly by player\", playerIndex);\n    } else {\n      console.log(\"Incorrect Uno call by player\", playerIndex);\n      // Potentially draw penalty cards if called incorrectly\n    }\n  };\n\n  const handleDrawCard = () => {\n    let newDrawPile = [...gameState.drawPile];\n    let newHands = [...gameState.hands]; // Clone the hands structure\n\n    if (newDrawPile.length === 0) {\n        reshuffleDiscardIntoDrawPile();\n        newDrawPile = [...gameState.drawPile]; // Update after reshuffle\n    }\n\n    const drawnCard = newDrawPile.shift(); // Assume there's at least one card to draw\n    newHands[gameState.currentPlayerIndex].push(drawnCard); // Update the correct player's hand\n\n    setGameState(prevState => ({\n        ...prevState,\n        drawPile: newDrawPile,\n        hands: newHands,\n    }));\n};\n\n\nconst applyCardEffect = (card) => {\n  switch (card.value) {\n    case 'Skip':\n      advanceTurn();\n      break;\n    case 'Reverse':\n      reversePlayDirection();\n      break;\n    case 'Draw Two':\n      const nextPlayer = getNextPlayerIndex();\n      drawCards(nextPlayer, 2);\n      advanceTurn();\n      break;\n    case 'Wild':\n      // Prompt player to choose a color. This can be done using a modal or a set of buttons.\n      // Update gameState.currentColor with the chosen color\n      break;\n    case 'Wild Draw Four':\n      // Similar to Wild, prompt for color choice, then make the next player draw four cards.\n      // Validate the play according to Uno rules (player must not have a card matching the discard pile color)\n      const nextPlayerIndex = getNextPlayerIndex();\n      drawCards(nextPlayerIndex, 4);\n      advanceTurn();\n      break;\n    // Other cases as needed\n  }\n};\n\n  \n\nconst handleCardClick = (card) => {\n  // Example validation: Check if the card can be played\n  const topDiscard = gameState.discardPile[gameState.discardPile.length - 1];\n  if (card.color === topDiscard.color || card.value === topDiscard.value || card.color === 'wild') {\n    // Valid move: Play the card\n    const newHands = [...gameState.hands];\n    newHands[gameState.currentPlayerIndex] = newHands[gameState.currentPlayerIndex].filter(c => c.id !== card.id);\n\n    const newDiscardPile = [...gameState.discardPile, card]; // Add card to the discard pile\n\n    setGameState(prevState => ({\n      ...prevState,\n      hands: newHands,\n      discardPile: newDiscardPile,\n    }));\n\n    applyCardEffect(card); // Apply any special effects of the card\n    console.log(`Playing card: ${card.value}`);\n  } else {\n    // Invalid move: Provide feedback or ignore\n    console.log(`Cannot play ${card.value}. It does not match the discard pile.`);\n  }\n};\n\n\n  return (\n    <div className=\"game-board\">\n      <OpponentHand cardCount={gameState.hands[getNextPlayerIndex()]?.length || 0} />\n      <PlayerHand hand={gameState.hands[gameState.currentPlayerIndex]} onCardClick={handleCardClick} />\n      <DrawPile cardsLeft={gameState.drawPile.length} onDrawCard={handleDrawCard} />\n      <DiscardPile topCard={gameState.discardPile[gameState.discardPile.length - 1]} />\n      <ActionPanel onDrawCard={() => drawCards(gameState.currentPlayerIndex, 1)} onCallUno={callUno} /> \n    </div>\n  );\n  \n};\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}