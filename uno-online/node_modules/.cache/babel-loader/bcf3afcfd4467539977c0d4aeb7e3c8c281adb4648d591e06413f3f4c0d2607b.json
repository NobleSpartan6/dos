{"ast":null,"code":"var _jsxFileName = \"/Users/ebenezereshetu/uno-online/uno-online/uno-online/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PlayerHand from './PlayerHand';\n\n// For generating and dealing the initial cards\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateInitialDrawPile = () => {\n  const colors = ['red', 'yellow', 'green', 'blue'];\n  const values = Array.from({\n    length: 9\n  }, (_, i) => i + 1); // 1-9 for each color\n  let deck = [];\n  colors.forEach(color => {\n    values.forEach(value => {\n      deck.push({\n        id: `${color}-${value}`,\n        color: color,\n        value: value.toString()\n      });\n    });\n  });\n\n  // Shuffle deck\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]]; // Swap\n  }\n  return deck;\n};\nconst dealInitialHands = drawPile => {\n  const hands = {\n    0: [],\n    1: []\n  };\n  const handSize = 7; // Each player starts with 7 cards\n\n  for (let i = 0; i < handSize; i++) {\n    for (let playerId in hands) {\n      let card = drawPile.pop();\n      hands[playerId].push(card);\n    }\n  }\n  return hands;\n};\nconst GameBoard = () => {\n  _s();\n  const [drawPile, setDrawPile] = useState(generateInitialDrawPile());\n  const [hands, setHands] = useState(dealInitialHands(drawPile));\n  const [discardPile, setDiscardPile] = useState([]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  // Add more state variables as needed, such as current color, direction of play, etc.\n\n  const handleCardClick = card => {\n    if (isValidPlay(card, discardPile)) {\n      playCard(card);\n      applyCardEffect(card);\n      advanceTurn();\n    } else {\n      alert(\"Invalid move!\");\n    }\n  };\n  const isValidPlay = (card, discardPile) => {\n    const topCard = discardPile[discardPile.length - 1];\n    return card.color === topCard.color || card.value === topCard.value;\n  };\n  const playCard = (card, currentPlayerIndex, hands, discardPile, setHands, setDiscardPile) => {\n    const newHand = hands[currentPlayerIndex].filter(c => c.id !== card.id);\n    const newHands = {\n      ...hands,\n      [currentPlayerIndex]: newHand\n    };\n    const newDiscardPile = [...discardPile, card];\n    setHands(newHands);\n    setDiscardPile(newDiscardPile);\n  };\n  const applyCardEffect = card => {\n    // Implement effects based on the card type\n    console.log(\"Applying card effect for:\", card);\n  };\n  const advanceTurn = (currentPlayerIndex, setCurrentPlayerIndex, playerCount) => {\n    setCurrentPlayerIndex((currentPlayerIndex + 1) % playerCount);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: /*#__PURE__*/_jsxDEV(PlayerHand, {\n      hand: hands[currentPlayerIndex],\n      onClick: handleCardClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"yxh5U+9xwS2YbExj1gwFQn7opH8=\");\n_c = GameBoard;\nexport default GameBoard;\n\n// // src/components/GameBoard.js\n\n// import React from 'react';\n// import PlayerHand from './PlayerHand';\n// import OpponentHand from './OpponentHand';\n// import DrawPile from './DrawPile';\n// import DiscardPile from './DiscardPile';\n// import ActionPanel from './ActionPanel';\n\n// const GameBoard = () => {\n//   const handleCardClick = (card) => {\n//     console.log(\"Clicked card:\", card);\n//     // Implement the logic for when a card is clicked\n//   };\n\n//   return (\n//     <div className=\"game-board\">\n//       <OpponentHand />\n//       <DrawPile />\n//       <DiscardPile />\n//       <PlayerHand onClick={handleCardClick} /> {/* Now this prop is properly implemented */}\n//       <ActionPanel />\n//     </div>\n//   );\n// };\n\n// export default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","PlayerHand","jsxDEV","_jsxDEV","generateInitialDrawPile","colors","values","Array","from","length","_","i","deck","forEach","color","value","push","id","toString","j","Math","floor","random","dealInitialHands","drawPile","hands","handSize","playerId","card","pop","GameBoard","_s","setDrawPile","setHands","discardPile","setDiscardPile","currentPlayerIndex","setCurrentPlayerIndex","handleCardClick","isValidPlay","playCard","applyCardEffect","advanceTurn","alert","topCard","newHand","filter","c","newHands","newDiscardPile","console","log","playerCount","className","children","hand","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ebenezereshetu/uno-online/uno-online/uno-online/src/components/GameBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PlayerHand from './PlayerHand';\n\n// For generating and dealing the initial cards\nconst generateInitialDrawPile = () => {\n  const colors = ['red', 'yellow', 'green', 'blue'];\n  const values = Array.from({length: 9}, (_, i) => i + 1); // 1-9 for each color\n  let deck = [];\n\n  colors.forEach(color => {\n    values.forEach(value => {\n      deck.push({ id: `${color}-${value}`, color: color, value: value.toString() });\n    });\n  });\n\n  // Shuffle deck\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]]; // Swap\n  }\n\n  return deck;\n};\n\n\nconst dealInitialHands = (drawPile) => {\n  const hands = { 0: [], 1: [] };\n  const handSize = 7; // Each player starts with 7 cards\n\n  for (let i = 0; i < handSize; i++) {\n    for (let playerId in hands) {\n      let card = drawPile.pop();\n      hands[playerId].push(card);\n    }\n  }\n\n  return hands;\n};\n\n\nconst GameBoard = () => {\n  const [drawPile, setDrawPile] = useState(generateInitialDrawPile());\n  const [hands, setHands] = useState(dealInitialHands(drawPile));\n  const [discardPile, setDiscardPile] = useState([]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  // Add more state variables as needed, such as current color, direction of play, etc.\n\n  const handleCardClick = (card) => {\n    if (isValidPlay(card, discardPile)) {\n      playCard(card);\n      applyCardEffect(card);\n      advanceTurn();\n    } else {\n      alert(\"Invalid move!\");\n    }\n  };\n\n  const isValidPlay = (card, discardPile) => {\n    const topCard = discardPile[discardPile.length - 1];\n    return card.color === topCard.color || card.value === topCard.value;\n  };\n  \n\n  const playCard = (card, currentPlayerIndex, hands, discardPile, setHands, setDiscardPile) => {\n    const newHand = hands[currentPlayerIndex].filter(c => c.id !== card.id);\n    const newHands = { ...hands, [currentPlayerIndex]: newHand };\n    const newDiscardPile = [...discardPile, card];\n  \n    setHands(newHands);\n    setDiscardPile(newDiscardPile);\n  };\n  \n\n  const applyCardEffect = (card) => {\n    // Implement effects based on the card type\n    console.log(\"Applying card effect for:\", card);\n  };\n  \n\n  const advanceTurn = (currentPlayerIndex, setCurrentPlayerIndex, playerCount) => {\n    setCurrentPlayerIndex((currentPlayerIndex + 1) % playerCount);\n  };\n  \n\n  return (\n    <div className=\"game-board\">\n      {/* Pass the current player's hand and the click handler */}\n      <PlayerHand hand={hands[currentPlayerIndex]} onClick={handleCardClick} />\n      {/* Other components will go here */}\n    </div>\n  );\n};\n\nexport default GameBoard;\n\n// // src/components/GameBoard.js\n\n// import React from 'react';\n// import PlayerHand from './PlayerHand';\n// import OpponentHand from './OpponentHand';\n// import DrawPile from './DrawPile';\n// import DiscardPile from './DiscardPile';\n// import ActionPanel from './ActionPanel';\n\n// const GameBoard = () => {\n//   const handleCardClick = (card) => {\n//     console.log(\"Clicked card:\", card);\n//     // Implement the logic for when a card is clicked\n//   };\n\n//   return (\n//     <div className=\"game-board\">\n//       <OpponentHand />\n//       <DrawPile />\n//       <DiscardPile />\n//       <PlayerHand onClick={handleCardClick} /> {/* Now this prop is properly implemented */}\n//       <ActionPanel />\n//     </div>\n//   );\n// };\n\n// export default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}