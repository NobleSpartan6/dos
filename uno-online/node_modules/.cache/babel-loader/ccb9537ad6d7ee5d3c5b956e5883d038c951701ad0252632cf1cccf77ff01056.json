{"ast":null,"code":"var _jsxFileName = \"/Users/ebenezereshetu/uno-online/uno-online/uno-online/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateInitialDrawPile = () => {\n  const colors = ['red', 'yellow', 'green', 'blue'];\n  const values = Array.from({\n    length: 9\n  }, (_, i) => i + 1); // 1-9 for each color\n  let deck = [];\n  colors.forEach(color => {\n    values.forEach(value => {\n      deck.push({\n        id: `${color}-${value}`,\n        color,\n        value: value.toString()\n      });\n    });\n  });\n\n  // Shuffle deck\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]]; // Swap\n  }\n  return deck;\n};\nconst dealInitialHands = (drawPile, playerCount) => {\n  const hands = Array.from({\n    length: playerCount\n  }, () => []);\n  const handSize = 7; // Each player starts with 7 cards\n\n  for (let i = 0; i < handSize; i++) {\n    hands.forEach(hand => {\n      hand.push(drawPile.pop());\n    });\n  }\n  return hands;\n};\nconst GameBoard = () => {\n  _s();\n  const initialPlayerCount = 2; // Set this based on your game setup or lobby system\n\n  const [gameState, setGameState] = useState({\n    drawPile: generateInitialDrawPile(),\n    hands: dealInitialHands(generateInitialDrawPile(), initialPlayerCount),\n    discardPile: [],\n    currentPlayerIndex: 0,\n    playDirection: 1,\n    // 1 for forward, -1 for reverse\n    playerCount: initialPlayerCount,\n    currentColor: null // Will be set when a color is chosen for a Wild card\n  });\n\n  // Function to handle card click\n  const handleCardClick = card => {\n    // Example implementation\n  };\n\n  // Function to check if a card play is valid\n  const isValidPlay = card => {\n    const topCard = gameState.discardPile[gameState.discardPile.length - 1] || {};\n    return card.color === topCard.color || card.value === topCard.value || card.color === 'wild';\n  };\n\n  // Function to advance to the next turn\n  const advanceTurn = () => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentPlayerIndex: (prevState.currentPlayerIndex + 1) % prevState.playerCount\n    }));\n  };\n\n  // Function to reverse the direction of play\n  const reversePlayDirection = () => {\n    setGameState(prevState => ({\n      ...prevState,\n      playDirection: prevState.playDirection * -1\n    }));\n  };\n\n  // Function to draw cards\n  const drawCards = (playerIndex, numberOfCards) => {\n    // Example implementation\n  };\n\n  // Function to apply the effect of a played card\n  const applyCardEffect = card => {\n    // Example implementation\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: /*#__PURE__*/_jsxDEV(PlayerHand, {\n      hand: gameState.hands[gameState.currentPlayerIndex],\n      onClick: handleCardClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"5+jGZDZIQsgs+VZlWOezG31tTUY=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","PlayerHand","jsxDEV","_jsxDEV","generateInitialDrawPile","colors","values","Array","from","length","_","i","deck","forEach","color","value","push","id","toString","j","Math","floor","random","dealInitialHands","drawPile","playerCount","hands","handSize","hand","pop","GameBoard","_s","initialPlayerCount","gameState","setGameState","discardPile","currentPlayerIndex","playDirection","currentColor","handleCardClick","card","isValidPlay","topCard","advanceTurn","prevState","reversePlayDirection","drawCards","playerIndex","numberOfCards","applyCardEffect","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ebenezereshetu/uno-online/uno-online/uno-online/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\n\nconst generateInitialDrawPile = () => {\n  const colors = ['red', 'yellow', 'green', 'blue'];\n  const values = Array.from({ length: 9 }, (_, i) => i + 1); // 1-9 for each color\n  let deck = [];\n\n  colors.forEach(color => {\n    values.forEach(value => {\n      deck.push({ id: `${color}-${value}`, color, value: value.toString() });\n    });\n  });\n\n  // Shuffle deck\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]]; // Swap\n  }\n\n  return deck;\n};\n\nconst dealInitialHands = (drawPile, playerCount) => {\n  const hands = Array.from({ length: playerCount }, () => []);\n  const handSize = 7; // Each player starts with 7 cards\n\n  for (let i = 0; i < handSize; i++) {\n    hands.forEach(hand => {\n      hand.push(drawPile.pop());\n    });\n  }\n\n  return hands;\n};\n\nconst GameBoard = () => {\n  const initialPlayerCount = 2; // Set this based on your game setup or lobby system\n\n  const [gameState, setGameState] = useState({\n    drawPile: generateInitialDrawPile(),\n    hands: dealInitialHands(generateInitialDrawPile(), initialPlayerCount),\n    discardPile: [],\n    currentPlayerIndex: 0,\n    playDirection: 1, // 1 for forward, -1 for reverse\n    playerCount: initialPlayerCount,\n    currentColor: null, // Will be set when a color is chosen for a Wild card\n  });\n\n  // Function to handle card click\n  const handleCardClick = (card) => {\n    // Example implementation\n  };\n\n  // Function to check if a card play is valid\n  const isValidPlay = (card) => {\n    const topCard = gameState.discardPile[gameState.discardPile.length - 1] || {};\n    return card.color === topCard.color || card.value === topCard.value || card.color === 'wild';\n  };\n\n  // Function to advance to the next turn\n  const advanceTurn = () => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentPlayerIndex: (prevState.currentPlayerIndex + 1) % prevState.playerCount,\n    }));\n  };\n\n  // Function to reverse the direction of play\n  const reversePlayDirection = () => {\n    setGameState(prevState => ({\n      ...prevState,\n      playDirection: prevState.playDirection * -1,\n    }));\n  };\n\n  // Function to draw cards\n  const drawCards = (playerIndex, numberOfCards) => {\n    // Example implementation\n  };\n\n  // Function to apply the effect of a played card\n  const applyCardEffect = (card) => {\n    // Example implementation\n  };\n\n  return (\n    <div className=\"game-board\">\n      <PlayerHand hand={gameState.hands[gameState.currentPlayerIndex]} onClick={handleCardClick} />\n      {/* Render other components here */}\n    </div>\n  );\n};\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}