{"ast":null,"code":"var _jsxFileName = \"/Users/ebenezereshetu/uno-online/uno-online/uno-online/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\nimport DiscardPile from './DiscardPile';\nimport DrawPile from './DrawPile';\nimport ActionPanel from './ActionPanel';\nimport OpponentHand from './OpponentHand';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateInitialDrawPile = () => {\n  const colors = ['red', 'yellow', 'green', 'blue'];\n  const values = Array.from({\n    length: 9\n  }, (_, i) => i + 1);\n  let deck = [];\n  colors.forEach(color => {\n    values.forEach(value => {\n      deck.push({\n        id: `${color}-${value}`,\n        color,\n        value: value.toString()\n      });\n    });\n  });\n\n  // Shuffle deck\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\nconst dealInitialHands = (drawPile, playerCount) => {\n  let hands = Array.from({\n    length: playerCount\n  }, () => []);\n  const handSize = 7;\n  for (let i = 0; i < handSize; i++) {\n    hands.forEach(hand => hand.push(drawPile.pop()));\n  }\n  return hands;\n};\nconst GameBoard = () => {\n  _s();\n  var _gameState$hands$getN;\n  const initialPlayerCount = 2;\n  const reshuffleDiscardIntoDrawPile = () => {\n    let newDiscardPile = [...gameState.discardPile];\n    const topCard = newDiscardPile.pop(); // Keep the top card out of the shuffle\n    const reshuffled = newDiscardPile.sort(() => 0.5 - Math.random()); // Simple shuffle\n    setGameState(prevState => ({\n      ...prevState,\n      drawPile: reshuffled,\n      discardPile: [topCard] // Reset discard pile with only the top card\n    }));\n  };\n\n  // Initial gameState definition with hands correctly initialized as an array of arrays\n  const [gameState, setGameState] = useState({\n    drawPile: [],\n    hands: [],\n    // Make sure this is correctly initialized\n    discardPile: [],\n    currentPlayerIndex: 0,\n    playDirection: 1,\n    playerCount: initialPlayerCount,\n    currentColor: null\n  });\n  useEffect(() => {\n    const initialDrawPile = generateInitialDrawPile();\n    const initialHands = dealInitialHands(initialDrawPile, gameState.playerCount);\n    setGameState(prevState => ({\n      ...prevState,\n      drawPile: initialDrawPile.slice(initialHands.flat().length),\n      // Ensure the draw pile is updated to remove dealt cards\n      hands: initialHands\n    }));\n  }, []);\n  const getNextPlayerIndex = () => {\n    return (gameState.currentPlayerIndex + gameState.playDirection + gameState.playerCount) % gameState.playerCount;\n  };\n  const advanceTurn = () => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentPlayerIndex: getNextPlayerIndex()\n    }));\n  };\n  const reversePlayDirection = () => {\n    setGameState(prevState => ({\n      ...prevState,\n      playDirection: prevState.playDirection * -1\n    }));\n  };\n  const drawCards = (playerIndex, numberOfCards) => {\n    // Adjusted to include reshuffling if necessary\n    let newDrawPile = [...gameState.drawPile];\n    if (newDrawPile.length === 0) reshuffleDiscardIntoDrawPile();\n    let newHands = {\n      ...gameState.hands\n    };\n    let cardsToDraw = numberOfCards;\n    while (cardsToDraw > 0 && newDrawPile.length > 0) {\n      const card = newDrawPile.shift(); // Removes the first card from the draw pile\n      newHands[playerIndex].push(card); // Adds the card to the player's hand\n      cardsToDraw--;\n    }\n\n    // If the draw pile is empty and there are still cards to draw, you might reshuffle the discard pile into the draw pile here\n\n    setGameState(prevState => ({\n      ...prevState,\n      drawPile: newDrawPile,\n      hands: newHands\n    }));\n  };\n  const callUno = playerIndex => {\n    // Check if the player has exactly one card left and if Uno was called correctly.\n    if (gameState.hands[playerIndex].length === 1) {\n      console.log(\"Uno called correctly by player\", playerIndex);\n    } else {\n      console.log(\"Incorrect Uno call by player\", playerIndex);\n      // Potentially draw penalty cards if called incorrectly\n    }\n  };\n  const handleDrawCard = () => {\n    let newDrawPile = [...gameState.drawPile];\n    let newHands = [...gameState.hands]; // Clone the hands structure\n\n    if (newDrawPile.length === 0) {\n      reshuffleDiscardIntoDrawPile();\n      newDrawPile = [...gameState.drawPile]; // Update after reshuffle\n    }\n    const drawnCard = newDrawPile.shift(); // Assume there's at least one card to draw\n    newHands[gameState.currentPlayerIndex].push(drawnCard); // Update the correct player's hand\n\n    setGameState(prevState => ({\n      ...prevState,\n      drawPile: newDrawPile,\n      hands: newHands\n    }));\n  };\n  const applyCardEffect = card => {\n    switch (card.value) {\n      case 'Skip':\n        advanceTurn();\n        break;\n      case 'Reverse':\n        reversePlayDirection();\n        break;\n      case 'Draw Two':\n        const nextPlayer = getNextPlayerIndex();\n        drawCards(nextPlayer, 2);\n        advanceTurn();\n        break;\n      case 'Wild':\n        // Prompt player to choose a color. This can be done using a modal or a set of buttons.\n        // Update gameState.currentColor with the chosen color\n        break;\n      case 'Wild Draw Four':\n        // Similar to Wild, prompt for color choice, then make the next player draw four cards.\n        // Validate the play according to Uno rules (player must not have a card matching the discard pile color)\n        const nextPlayerIndex = getNextPlayerIndex();\n        drawCards(nextPlayerIndex, 4);\n        advanceTurn();\n        break;\n      // Other cases as needed\n    }\n  };\n  const handleCardClick = card => {\n    // Example validation: Check if the card can be played\n    const topDiscard = gameState.discardPile[gameState.discardPile.length - 1];\n    if (card.color === topDiscard.color || card.value === topDiscard.value || card.color === 'wild') {\n      // Valid move: Play the card\n      const newHands = [...gameState.hands];\n      newHands[gameState.currentPlayerIndex] = newHands[gameState.currentPlayerIndex].filter(c => c.id !== card.id);\n      const newDiscardPile = [...gameState.discardPile, card]; // Add card to the discard pile\n\n      setGameState(prevState => ({\n        ...prevState,\n        hands: newHands,\n        discardPile: newDiscardPile\n      }));\n      applyCardEffect(card); // Apply any special effects of the card\n      console.log(`Playing card: ${card.value}`);\n    } else {\n      // Invalid move: Provide feedback or ignore\n      console.log(`Cannot play ${card.value}. It does not match the discard pile.`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(OpponentHand, {\n      cardCount: ((_gameState$hands$getN = gameState.hands[getNextPlayerIndex()]) === null || _gameState$hands$getN === void 0 ? void 0 : _gameState$hands$getN.length) || 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerHand, {\n      hand: gameState.hands[gameState.currentPlayerIndex],\n      onCardClick: handleCardClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DrawPile, {\n      cardsLeft: gameState.drawPile.length,\n      onDrawCard: handleDrawCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiscardPile, {\n      topCard: gameState.discardPile[gameState.discardPile.length - 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionPanel, {\n      onDrawCard: () => drawCards(gameState.currentPlayerIndex, 1),\n      onCallUno: callUno\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"jWMLxbxalCMBbL2VuRmXmqQZiVI=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","PlayerHand","DiscardPile","DrawPile","ActionPanel","OpponentHand","jsxDEV","_jsxDEV","generateInitialDrawPile","colors","values","Array","from","length","_","i","deck","forEach","color","value","push","id","toString","j","Math","floor","random","dealInitialHands","drawPile","playerCount","hands","handSize","hand","pop","GameBoard","_s","_gameState$hands$getN","initialPlayerCount","reshuffleDiscardIntoDrawPile","newDiscardPile","gameState","discardPile","topCard","reshuffled","sort","setGameState","prevState","currentPlayerIndex","playDirection","currentColor","initialDrawPile","initialHands","slice","flat","getNextPlayerIndex","advanceTurn","reversePlayDirection","drawCards","playerIndex","numberOfCards","newDrawPile","newHands","cardsToDraw","card","shift","callUno","console","log","handleDrawCard","drawnCard","applyCardEffect","nextPlayer","nextPlayerIndex","handleCardClick","topDiscard","filter","c","className","children","cardCount","fileName","_jsxFileName","lineNumber","columnNumber","onCardClick","cardsLeft","onDrawCard","onCallUno","_c","$RefreshReg$"],"sources":["/Users/ebenezereshetu/uno-online/uno-online/uno-online/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\nimport DiscardPile from './DiscardPile';\nimport DrawPile from './DrawPile';\nimport ActionPanel from './ActionPanel';\nimport OpponentHand from './OpponentHand';\n\nconst generateInitialDrawPile = () => {\n  const colors = ['red', 'yellow', 'green', 'blue'];\n  const values = Array.from({ length: 9 }, (_, i) => i + 1);\n  let deck = [];\n\n  colors.forEach(color => {\n    values.forEach(value => {\n      deck.push({ id: `${color}-${value}`, color, value: value.toString() });\n    });\n  });\n\n\n  // Shuffle deck\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n\n  return deck;\n};\n\nconst dealInitialHands = (drawPile, playerCount) => {\n  let hands = Array.from({ length: playerCount }, () => []);\n  const handSize = 7;\n\n  for (let i = 0; i < handSize; i++) {\n    hands.forEach(hand => hand.push(drawPile.pop()));\n  }\n\n  return hands;\n};\n\nconst GameBoard = () => {\n  const initialPlayerCount = 2;\n\n  const reshuffleDiscardIntoDrawPile = () => {\n    let newDiscardPile = [...gameState.discardPile];\n    const topCard = newDiscardPile.pop(); // Keep the top card out of the shuffle\n    const reshuffled = newDiscardPile.sort(() => 0.5 - Math.random()); // Simple shuffle\n    setGameState(prevState => ({\n      ...prevState,\n      drawPile: reshuffled,\n      discardPile: [topCard] // Reset discard pile with only the top card\n    }));\n  };\n\n\n\n// Initial gameState definition with hands correctly initialized as an array of arrays\nconst [gameState, setGameState] = useState({\n  drawPile: [],\n  hands: [], // Make sure this is correctly initialized\n  discardPile: [],\n  currentPlayerIndex: 0,\n  playDirection: 1,\n  playerCount: initialPlayerCount,\n  currentColor: null,\n});\n\n\n  useEffect(() => {\n    const initialDrawPile = generateInitialDrawPile();\n    const initialHands = dealInitialHands(initialDrawPile, gameState.playerCount);\n\n    setGameState(prevState => ({\n      ...prevState,\n      drawPile: initialDrawPile.slice(initialHands.flat().length), // Ensure the draw pile is updated to remove dealt cards\n      hands: initialHands,\n    }));\n}, []);\n\n\n  const getNextPlayerIndex = () => {\n    return (gameState.currentPlayerIndex + gameState.playDirection + gameState.playerCount) % gameState.playerCount;\n  };\n\n  const advanceTurn = () => {\n    setGameState(prevState => ({\n      ...prevState,\n      currentPlayerIndex: getNextPlayerIndex(),\n    }));\n  };\n\n  const reversePlayDirection = () => {\n    setGameState(prevState => ({\n      ...prevState,\n      playDirection: prevState.playDirection * -1,\n    }));\n  };\n\n  const drawCards = (playerIndex, numberOfCards) => {\n    // Adjusted to include reshuffling if necessary\n    let newDrawPile = [...gameState.drawPile];\n    if(newDrawPile.length === 0) reshuffleDiscardIntoDrawPile();\n    let newHands = { ...gameState.hands };\n    let cardsToDraw = numberOfCards;\n  \n    while (cardsToDraw > 0 && newDrawPile.length > 0) {\n      const card = newDrawPile.shift(); // Removes the first card from the draw pile\n      newHands[playerIndex].push(card); // Adds the card to the player's hand\n      cardsToDraw--;\n    }\n  \n    // If the draw pile is empty and there are still cards to draw, you might reshuffle the discard pile into the draw pile here\n  \n    setGameState(prevState => ({\n      ...prevState,\n      drawPile: newDrawPile,\n      hands: newHands,\n    }));\n  };\n\n  const callUno = (playerIndex) => {\n    // Check if the player has exactly one card left and if Uno was called correctly.\n    if (gameState.hands[playerIndex].length === 1) {\n      console.log(\"Uno called correctly by player\", playerIndex);\n    } else {\n      console.log(\"Incorrect Uno call by player\", playerIndex);\n      // Potentially draw penalty cards if called incorrectly\n    }\n  };\n\n  const handleDrawCard = () => {\n    let newDrawPile = [...gameState.drawPile];\n    let newHands = [...gameState.hands]; // Clone the hands structure\n\n    if (newDrawPile.length === 0) {\n        reshuffleDiscardIntoDrawPile();\n        newDrawPile = [...gameState.drawPile]; // Update after reshuffle\n    }\n\n    const drawnCard = newDrawPile.shift(); // Assume there's at least one card to draw\n    newHands[gameState.currentPlayerIndex].push(drawnCard); // Update the correct player's hand\n\n    setGameState(prevState => ({\n        ...prevState,\n        drawPile: newDrawPile,\n        hands: newHands,\n    }));\n};\n\n\nconst applyCardEffect = (card) => {\n  switch (card.value) {\n    case 'Skip':\n      advanceTurn();\n      break;\n    case 'Reverse':\n      reversePlayDirection();\n      break;\n    case 'Draw Two':\n      const nextPlayer = getNextPlayerIndex();\n      drawCards(nextPlayer, 2);\n      advanceTurn();\n      break;\n    case 'Wild':\n      // Prompt player to choose a color. This can be done using a modal or a set of buttons.\n      // Update gameState.currentColor with the chosen color\n      break;\n    case 'Wild Draw Four':\n      // Similar to Wild, prompt for color choice, then make the next player draw four cards.\n      // Validate the play according to Uno rules (player must not have a card matching the discard pile color)\n      const nextPlayerIndex = getNextPlayerIndex();\n      drawCards(nextPlayerIndex, 4);\n      advanceTurn();\n      break;\n    // Other cases as needed\n  }\n};\n\n  \n\nconst handleCardClick = (card) => {\n  // Example validation: Check if the card can be played\n  const topDiscard = gameState.discardPile[gameState.discardPile.length - 1];\n  if (card.color === topDiscard.color || card.value === topDiscard.value || card.color === 'wild') {\n    // Valid move: Play the card\n    const newHands = [...gameState.hands];\n    newHands[gameState.currentPlayerIndex] = newHands[gameState.currentPlayerIndex].filter(c => c.id !== card.id);\n\n    const newDiscardPile = [...gameState.discardPile, card]; // Add card to the discard pile\n\n    setGameState(prevState => ({\n      ...prevState,\n      hands: newHands,\n      discardPile: newDiscardPile,\n    }));\n\n    applyCardEffect(card); // Apply any special effects of the card\n    console.log(`Playing card: ${card.value}`);\n  } else {\n    // Invalid move: Provide feedback or ignore\n    console.log(`Cannot play ${card.value}. It does not match the discard pile.`);\n  }\n};\n\n\n  return (\n    <div className=\"game-board\">\n      <OpponentHand cardCount={gameState.hands[getNextPlayerIndex()]?.length || 0} />\n      <PlayerHand hand={gameState.hands[gameState.currentPlayerIndex]} onCardClick={handleCardClick} />\n      <DrawPile cardsLeft={gameState.drawPile.length} onDrawCard={handleDrawCard} />\n      <DiscardPile topCard={gameState.discardPile[gameState.discardPile.length - 1]} />\n      <ActionPanel onDrawCard={() => drawCards(gameState.currentPlayerIndex, 1)} onCallUno={callUno} /> \n    </div>\n  );\n  \n};\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}